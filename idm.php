<?php 
eval("?>".base64_decode("<?php
date_default_timezone_set("Asia/Jakarta");
awalmula:

echo @color('nevy', " *============================================* \n");
echo @color('nevy', " ************** TEAM INDOMARET ************** \n");
echo @color('nevy', " *============================================* \n");

echo @color('green', "[".date("l, Y-m-d H:i:s")."]\n");
#echo @color('yellow', "ngek");
echo @color('yellow', "MENU:\n");
echo @color('yellow', "[1] HAPUS SEMUA KERANJANG\n");
echo @color('yellow', "[2] CEK STOK TOKO\n");
echo @color('yellow', "[3] CEK PIN TRANSAKSI\n");
echo @color('yellow', "[4] GANTI TOKO\n");
echo @color('yellow', "[5] ISI ALAMAT MASAL\n");
echo @color('yellow', "[6] HAPUS ALAMAT MASAL\n");
echo @color('yellow', "[7] ISI KERANJANG MASAL\n");
echo @color('yellow', "[8] ORDER MASAL\n");
echo @color('yellow', "[9] CEK KERANJANG\n");
echo @color('red', "[X] EXIT\n");
echo @color('nevy', "Ketik help jika anda bingung \n");
echo @color('yellow', "Choice: ");
$choice = trim(fgets(STDIN));
echo "\n";
switch ($choice) {
    case 'help':
echo @color('yellow', "[1] HAPUS SEMUA ISI KERANJANG\n");
echo @color('nevy', "Menu ini untuk menghapus semua isi keranjang akun anda\n");
echo @color('yellow', "[2] CEK STOK TOKO\n");
echo @color('nevy', "Menu ini untuk cek stok toko sesuai yg ada pada keranjang akun anda. Support cek semua item yang ada pada keranjang anda\n");
echo @color('yellow', "[3] CEK PIN TRANSAKSI\n");
echo @color('nevy', "Menu ini untuk cek pin dan kode transaksi pada akun klikindomaret\n");
echo @color('yellow', "[4] GANTI TOKO\n");
echo @color('nevy', "Menu ini untuk ubah kode toko akun klikindomaret\n");
echo @color('yellow', "[5] ISI ALAMAT MASAL\n");
echo @color('nevy', "Menu ini untuk mengisi alamat acak sesuai kode pos yang anda input untuk akun klikindomaret\n");
echo @color('yellow', "[6] HAPUS ALAMAT MASAL\n");
echo @color('nevy', "Menu ini untuk menghapus alamat yang ada pada akun klikindomaret\n");
echo @color('yellow', "[7] ISI KERANJANG MASAL\n");
echo @color('nevy', "Menu ini untuk mengisi item sesuai yang anda inginkan ke akun klikindomaret\n");
echo @color('yellow', "[8] ORDER MASAL\n");
echo @color('nevy', "Menu ini untuk co / belanja akun klikindomaret dengan akun yang sudah ada keranjang\n");
echo @color('yellow', "[9] CEK KERANJANG\n");
echo @color('nevy', "Menu ini untuk menyiapkan file dengan kupon yg diinginkan\n");
echo @color('red', "[X] EXIT\n");
echo @color('nevy', "Untuk keluar\n");

break;
    case '1':
    masal2x:
    $password = "Tayo123!";
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal2x;
}
$lines = file($file, FILE_IGNORE_NEW_LINES);
print_r($lines);
echo "Start baris ke : ";
$start = trim(fgets(STDIN));
echo "Sampai baris ke : ";

$endd = trim(fgets(STDIN));
$filex = retrieveText($file, $start, $endd);

$list = explode("\n", str_replace("\r", "", $filex));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";
unlink('nganue.txt');
    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    echo @color('nevy', "$nomor\n");
    $DEVICE_ID = urut(16);
        $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';
$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);

$respi = json_decode($verif[1]);
                $respid = $respi->ResponseID;
                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
                $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);

                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $RegionId = $cok[0]->RegionId;
                $toko = $cok[0]->StoreDefault;

                $getscid = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId=00000000-0000-0000-0000-000000000000&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$toko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                $za = json_decode($getscid[1]);
                if (strpos($getscid[1], '"Message":"An error has occurred."')) {
                    echo @color('red', "ERROR KAK\n");
                } else {
                $scid = $za[0]->ID;

                $cekk = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$scid.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$toko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                $json = json_decode($cekk[1]);
                foreach($json[0]->CartItemNotification->Items as $mydata) {
                    $cx = $mydata;
                    foreach($cx->ShoppingCartItems as $myxxx) {
                        $idne = $myxxx->ID;
                        $hapus = curlx('https://api.klikindomaret.com/api/ShoppingCart/RemoveCartItem?regionID='.$RegionId, '{"CartId":"'.$scid.'","CartItemId":"'.$idne.'","PackagePermalink":""}', $kuntul);
                        if (strpos($hapus[1], '"IsSuccess":true')) {
echo @color('green', "Sukses Hapus item \n");
$sisane = curlx('https://api.klikindomaret.com/api/ShoppingCart/GetMyCartCount?customerId=9e5c6a58-2c6b-43b6-ae83-99cbc3dd280f', null, $kuntul);
echo @color('nevy', "Sisa Item di keranjang: ");
echo @color('yellow', "$sisane[1]\n");
                        } else {
echo @color('red', "X\n");
                        }

                    }


                }
            }

                
$no++;

} else {
                echo @color('red', "$responx\n");
            }
}
goto awalmula;
        break;
    case '2':
    masal3x:
    $password = "Tayo123!";

    echo "Nomor Akun : ";
    $nomor = trim(fgets(STDIN));
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal3x;
}
$list = explode("\n", str_replace("\r", "", file_get_contents($file)));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";

    $akunxx = explode(';', trim($kode));
    $toko = strtoupper(trim($akunxx[0]));
    
        $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';
$verif = curl('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);

$respi = json_decode($verif[1]);
                $respid = $respi->ResponseID;

                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
                $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curl('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);

                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $RegionId = $cok[0]->RegionId;
                $storeid = $cok[0]->StoreDefault;
                $getscid = curl('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId=00000000-0000-0000-0000-000000000000&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$storeid.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.urut(16).'&ShoppingcartPromoPackagesID=', null, $kuntul);
                $za = json_decode($getscid[1]);
                $scid = $za[0]->ID;
                
                
                $setaddress = curl('https://api.klikindomaret.com/api/ShoppingCart/ReCheckStockAllItem?ShoppingCartID='.$scid.'&StoreCode='.$toko.'&AddressType=0&CustomerAddressID=00000000-0000-0000-0000-000000000000&CustomerID='.$ID.'&StoreCodeDest=&CustomerLatitude=&CustomerLongitude=', null, $kuntul);
                if (strpos($setaddress[1], '"Success":true')) {
                    $datatoko = json_decode($setaddress[1])[0];
                    $tokone = $datatoko->ResponseObject->StoreCode;
                        $tokone2 = $datatoko->ResponseObject->StoreName;
                        $tokone3 = $datatoko->ResponseObject->StoreAddress;
                        echo @color('yellow', "Kode Toko: ");
                        echo @color('nevy', "$tokone\n");
                        echo @color('yellow', "Toko : ");
                        echo @color('nevy', "$tokone2 - $tokone3\n");
                        save("=======================\nKode Toko: $tokone\nToko : $tokone2 - $tokone3\n", 'stoktoko.txt');
                    foreach($datatoko->ResponseObject->Items as $mydata) {
                        
                        $barang = $mydata->ProductDesc;
                        $qty = $mydata->QtyAvailable;
                        echo @color('yellow', "Item : ");
                        echo @color('nevy', "$barang\n");
                        echo @color('yellow', "Stok : ");
                        echo @color('nevy', "$qty\n");
                        save("Item : $barang\nStok : $qty\n", 'stoktoko.txt');

                    }
                    save("=======================\n", 'stoktoko.txt');
                    echo @color('yellow', "Tersimpan di stoktoko.txt\n");
                    echo "\n";
                } else {
                    echo @color('red', "$setaddress[1]\n");
                }

                
$no++;

} else {
    echo @color('red', "$responx\n");
            }
}
goto awalmula;
        break;

    case '3':
    masal4x:
    $password = "Tayo123!";
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal4x;
}
$lines = file($file, FILE_IGNORE_NEW_LINES);
print_r($lines);
echo "Start baris ke : ";
$start = trim(fgets(STDIN));
echo "Sampai baris ke : ";

$endd = trim(fgets(STDIN));
$filex = retrieveText($file, $start, $endd);

$list = explode("\n", str_replace("\r", "", $filex));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";
unlink('nganue.txt');
    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    echo @color('nevy', "$nomor\n");
    
        $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';
$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);


$respi = json_decode($verif[1]);
                $respid = $respi->ResponseID;
                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
                $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);


                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $RegionId = $cok[0]->RegionId;
                $toko = $cok[0]->StoreDefault;

                $getscid = curlx('https://api.klikindomaret.com/api/ShoppingCart/GetLastestShop?customerID='.$ID.'&regionID='.$RegionId, null, $kuntul);
               
                $za = json_decode($getscid[1]);
                if (strpos($getscid[1], '"Message":"An error has occurred."')) {
                    echo color('red', "ERROR KAK\n");
                } else {
                $scid = $za[0];

                $cekk = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);

                $json = json_decode($cekk[1]);
                //print_r($json);
                foreach($json as $mydata) {
                    $kodene = $mydata->TransactionCode;
                    $cekkode = curlx('https://api.klikindomaret.com/api/Payment/DetailPayment?TransactionCode='.$kodene.'&TypeCode=', null, $kuntul);
                   
                    $hasil = json_decode($cekkode[1])[0];
                    $pine = $hasil->IStore->PINIndoPaket;
                    $toko = $hasil->IStore->KodeToko;
                    $almt = $hasil->StoreCustomerStreet;
                    $nama = $hasil->IStore->ReceiverName;
                    $noe = $hasil->CustomerMobile;
                    $waktu = $hasil->IStore->WaktuPengiriman;
                    $kodetrx = $hasil->JoinedSONumber;
                    if ($pine !== null) {
                        echo @color('yellow', "Kode Transaksi : ");
                        echo @color('nevy', "$kodetrx\n");
                        echo @color('yellow', "Nama : ");
                        echo @color('nevy', "$nama\n");
                        echo @color('yellow', "Nomor : ");
                        echo @color('nevy', "$noe\n");
                        echo @color('yellow', "Toko : ");
                        echo @color('nevy', "$toko $almt\n");
                        echo @color('yellow', "Waktu Pengambilan: ");
                        echo @color('nevy', "$waktu\n");
                        echo @color('yellow', "PIN Transaksi : ");
                        echo @color('nevy', "$pine\n");
                        echo "Item: \n";
                        foreach($hasil->IStore->ItemDetail as $mydata) {
$brg = $mydata->Nama;
$qty = $mydata->Qty;
echo @color('nevy', "$brg ");
echo "X";
echo @color('yellow', "$qty\n");


                        }

                    
                    echo @color('yellow', "Tersimpan di pin.txt\n");
                    echo "\n";
                    save("KodeTransaksi:".$kodetrx."|PIN_Transaksi:".$pine."|Nama:".$nama."|Nomor:".$noe."|WaktuAmbil:".$waktu."|KodeToko:".$toko."\n", 'pin.txt');

                    }
                    
                    


                }
            }

                
$no++;

} else {
    echo @color('red', "$responx\n");
            }
}
goto awalmula;
        break;
    case '4':
$pass = "Tayo123!";
echo "\n";
echo @color('yellow',"Masukkan Kode Toko: ");
$kodetoko = trim(fgets(STDIN));
echo "\n";
logi:
echo "[+] Input File: ";
$filexxx = trim(fgets(STDIN));
$t5 = explode("\n",@file_get_contents($filexxx));
print_r($t5);
echo "\n";
$ad = count($t5)-1;
echo "\n";
echo "Mulai Baris Ke  : ";
$r1= trim(fgets(STDIN));
echo "Sampai Baris Ke : ";
$r2= trim(fgets(STDIN));
for($r1; $r1 < $r2; $r1++){
$akun = $t5;
$noo = $akun[$r1];
$nooo = str_replace("\r","", $noo);
$no = $nooo;
echo "\n";
echo @color('yellow',"Akun Ke: ");
echo $r1;
echo "\n";
echo @color('nevy',"Nomor : ");
echo $no;
echo "\n";
gasi:
$file = "keliek.txt";
if (!unlink($file)){
echo ("Err");
}else{
echo "Del";
}
echo "\n\n";
$rand = rand(1000,9999);
$ran = rand(1000000,9999999);
$ra = rand(100000,999999);
$tok = "740f".$rand."bebcf74f9b7c25d48e".$ran."f6aa01da5ddb".$ra."c7eaf61bb78ad";
$data = '{"Email":"'.$no.'","Password":"'.$pass.'"}';
$login = post("https://api.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=".$tok."&districtID=5174&TrafficSource=", $data);
$modify = json_decode($login, true);
$rid=@$modify["ResponseID"];
$id=@$modify["ResponseObject"]["ID"];
$msg=@$modify["Message"];

if($msg == "Success"){
    

$awalan = getRequestt("https://api.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId=".$id);
$awaln = getRequestt("https://api.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId=".$id);
$wilayah = getRequestt("https://api.klikindomaret.com/api/Store/GetListAutoComplete?StoreCode=".$kodetoko."&customerLatitude=&customerLongitude=");
$pilih = getRequestt("https://api.klikindomaret.com/api/ShoppingCart/ReCheckStockAllItem?ShoppingCartID=".$rid."&StoreCode=".$kodetoko."&AddressType=0&CustomerAddressID=00000000-0000-0000-0000-000000000000&CustomerID=".$id."&StoreCodeDest=&CustomerLatitude=&CustomerLongitude=");
$regidd = json_decode($pilih, true);
$regid=@$regidd[0]["ResponseObject"]["RegionID"];
$storeid=@$regidd[0]["ResponseObject"]["StoreID"];
$sn=@$regidd[0]["ResponseObject"]["StoreName"];
$kt=@$regidd[0]["ResponseObject"]["StoreCode"];
$sa=@$regidd[0]["ResponseObject"]["StoreAddress"];
$rn=@$regidd[0]["ResponseObject"]["RegionName"];
$dn=@$regidd[0]["ResponseObject"]["DistrictName"];
echo "\n";
echo @color('yellow'," Kode Toko    : ");
echo @color('nevy',"$kt");

echo "\n";
echo @color('yellow'," Nama Toko    : ");
echo @color('nevy',"$sn");
echo "\n";
echo @color('yellow'," Alamat Toko  : ");
echo @color('nevy',"$sa");
echo "\n";
echo @color('yellow'," Region Toko  : ");
echo @color('nevy',"$rn");
echo "\n";
echo @color('yellow'," Distrik Toko : ");
echo @color('nevy',"$dn");
echo "\n\n";
$awalan = getRequestt("https://api.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId=".$id);
$awaln = getRequestt("https://api.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId=".$id);
$wilayah = getRequestt("https://api.klikindomaret.com/api/Store/GetListByAreaWilayahStore?Lat=&Long=");
$pilih = getRequestt("https://api.klikindomaret.com/api/ShoppingCart/GetStoreAttributesFromStoreCode?StoreCodes=".$kodetoko);
$data = '{"CustomerID":"'.$id.'","AddressType":0,"StoreCode":"'.$kodetoko.'"}';
$addd = postt("https://api.klikindomaret.com/api/CustomerAddress/SetAddressTypeAndDefaultStore?mfp_id=".$rid."&isChangeAddress=False&ShoppingCartID=00000000-0000-0000-0000-000000000000", $data);
} else {
    echo @color('red',"$login\n");
}
}


goto awalmula;
        break;
    case '5':
            masal3sx:
    $password = "Tayo123!";
    echo @color('yellow', "Masukkan zipcode: ");
    $zipcone = trim(fgets(STDIN));

    
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal3sx;
}
$list = explode("\n", str_replace("\r", "", file_get_contents($file)));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";
unlink('nganue.txt');
    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    
        $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';
$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);

$respi = json_decode($verif[1]);
                $respid = $respi->ResponseID;

                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
                $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);

                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $FName = $cok[0]->FName;
                $LName = $cok[0]->LName;
                $RegionId = $cok[0]->RegionId;
                $storeid = $cok[0]->StoreDefault;
                


                $awl = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/GetWhitelistZipCode?mfp_id='.$respid, null, $kuntul2);
                $getprov = curlx('https://api.klikindomaret.com/api/CustomerAddress/GetProvince?mfp_id='.$respid, null, $kuntul2);
                $kuntol = array();
                $kuntol[] = 'Content-Type: application/json';
                $kuntol[] = 'Host: api.klikindomaret.com';
                $kuntol[] = 'User-Agent: okhttp/3.12.1';
                $getzip = curlx('https://api-content.klikindomaret.com/api/Store/AUTOCOMPLETE_ZIPCODE_DISTRICTS_CITY_REGION?mfp_id='.$respid.'&key='.$zipcone, null, $kuntol);
                $sds = json_decode($getzip[1]);
                $distrik0 = $sds[0]->Zipcode;
                $distrik1 = $sds[1]->Zipcode;
                $distrik2 = $sds[2]->Zipcode;
                $distrik3 = $sds[3]->Zipcode;
                $distrik4 = $sds[4]->Zipcode;
                echo @color('yellow', "DAFTAR HIDANGAN : \n");
                echo @color('nevy', "[1] $distrik0\n");
                echo @color('nevy', "[2] $distrik1\n");
                echo @color('nevy', "[3] $distrik2\n");
                echo @color('nevy', "[4] $distrik3\n");
                echo @color('nevy', "[5] $distrik4\n");
                echo @color('nevy', "PILIH : ");
                $milih = trim(fgets(STDIN));
                switch ($milih) {
                    case '1':
                        $distrik = $sds[0]->Districts;
                        break;
                        case '2':
                        $distrik = $sds[1]->Districts;
                        break;
                        case '3':
                        $distrik = $sds[2]->Districts;
                        break;
                        case '4':
                        $distrik = $sds[3]->Districts;
                        break;
                        case '5':
                        $distrik = $sds[4]->Districts;
                        break;
                }
               $disterik = urlencode($distrik);

                $getful = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/AUTOCOMPLETE_ADRESSBY_ZIPCODE?key='.$zipcone.'&districtname='.$disterik.'&mfp_id='.$respid, null, $kuntul2);
                
                $asdasd = json_decode($getful[1]);
                $ProvinsiID = $asdasd[0]->ProvinsiID;
                $KotaID = $asdasd[0]->KotaID;
                $KecamatanID = $asdasd[0]->KecamatanID;
                $KelurahanID = $asdasd[0]->KelurahanID;
                $Kecamatan = $asdasd[0]->Kecamatan;
                $Provinsi = $asdasd[0]->Provinsi;
                $Kota = $asdasd[0]->Kota;
                
                $model = ['Kenanga indah 2', 'mawar melati indah', 'bangka 11', 'sulawesi' , 'murai sawah 4', 'lokasi baru jaya', 'sumbawa gang 3', 'delima 009', 'bilikanger ', 'imam bonjol 3', 'gunawangsa', 'batu aji', 'Songgoriti indah jaya', 'kuningan sari', 'lomba sapi', 'majumapan'];
        $modelhp = $model[rand(0, 15)];

                $postalamat = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/InsertAddress?mfp_id='.$respid, '{"ID":"00000000-0000-0000-0000-000000000000","AddressTitle":"Rumah","CustomerID":"'.$ID.'","Phone":"'.$nomor.'","Street":"Jalan '.$modelhp.'","Street2":"","Street3":"","District":"'.$distrik.'","ZipCode":"'.$zipcone.'","IsDefault":true,"ProvinceId":"'.$ProvinsiID.'","CityId":"'.$KecamatanID.'","Region":"'.$KotaID.'","CityLabel":"'.$Kecamatan.'","ProvinceName":"'.$Provinsi.'","RegionName":"'.$Kota.'","DistrictId":"'.$KelurahanID.'","ReceiverName":"'.$FName.' '.$LName.'","ReceiverPhone":"'.$nomor.'","GoogleAddress":""}', $kuntul2);
                if (strpos($postalamat[1], '"Message":"success"')) {
                    echo @color('green', "SUKSES ISI ALAMAT\n");
                } else {
                    echo @color('red', "$postalamat[1]\n");
                }


$no++;

} else {
    echo @color('red', "$responx\n");
            }
}
unlink('nganue.txt');
goto awalmula;
        break;
    case '6':
        masal3sxa:
    $password = "Tayo123!";
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal3sxa;
}
$list = explode("\n", str_replace("\r", "", file_get_contents($file)));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";
unlink('nganue.txt');
    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    
        $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';
$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);

$respi = json_decode($verif[1]);
                $respid = $respi->ResponseID;

                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
                $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);

                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $getaddress = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId='.$ID, null, $kuntul2);
               
                        if ($getaddress[1] == '[]') {

echo @color('red', "ALAMAT KOSONG\n");
                        } else {
$addidx = json_decode($getaddress[1]);
                        
                        $addid = $addidx[0]->ID;
                        $delete = curlx('https://account-api-v2.klikindomaret.com/api/Customer/DeleteAddress?customerID='.$ID.'&id='.$addid.'&mfp_id='.$respid, null, $kuntul2);
                        echo @color('green', "$delete[1]\n");


                        }

$no++;

} else {
    echo @color('red', "$responx\n");
            }
}
unlink('nganue.txt');
goto awalmula;
        break;
    case '7':
    searchproduk:
        echo @color('nevy', "Search Key: ");
$key = trim(fgets(STDIN));
$key = urlencode($key);
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'https://api-catalog.klikindomaret.com/api/Product/GetPaging?regionID=353801d5-28d6-4190-9b2d-327e89c4d98f&Page=1&PageSize=50&SortCol=Latest&SortDir=DESC&SearchKey='.$key.'&StartPrice=&EndPrice=&USERID=023e5448-2442-4e0b-af57-250ee44f2e84&mfp_id=111a355f-7fd1-46ab-aa24-803f7e97d9b9&StoreCode=T71T&platform=ANDROID&addressType=1&latitude=-2.994048&longitude=104.820175&StoreCodeDest=&WarehouseCode=TMDD&WarehouseDCICode=TWPG&WarehouseMitraCode=&IsLogin=true&Client=KLIK');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Connection: close';
$headers[] = 'Accept-Encoding: gzip, deflate';
$headers[] = 'User-Agent: okhttp/3.12.1';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);
$sttr = json_decode($result);

$json = json_decode($result);
pilihprodukx:
$ajgjuga = json_decode($result, true);
        $a1="0";
        $a2="100";
        
        for($a1; $a1 < $a2; $a1++){
        $district=@$ajgjuga[0]["ProductList"][$a1]["Description"];
        $district2=@$ajgjuga[0]["ProductList"][$a1]["ID"];
        $harga=@$ajgjuga[0]["ProductList"][$a1]["ValidPrice"];
        //print_r($ajgjuga);
       echo @color('nevy', "[$a1]");
        echo ". ";
        echo @color('yellow', "$district ");
        echo @color('green', "=>> Rp $harga");
        echo "\n";
        if($district == ""){
            break;
        }
        }
        echo @color('nevy', "JIKA TIDAK ADA ATAU MERUBAH PENCARIAN KETIK : ");
        echo @color('red', "x\n");

    echo @color('yellow', "PILIH PRODUK : ");
    $pilihproduk = trim(fgets(STDIN));
    switch ($pilihproduk) {
        case '0':
            $produk =@$ajgjuga[0]["ProductList"][0]["ID"];
            break;
        case '1':
            $produk =@$ajgjuga[0]["ProductList"][1]["ID"];
            break;
            case '2':
            $produk =@$ajgjuga[0]["ProductList"][2]["ID"];
            break;
            case '3':
            $produk =@$ajgjuga[0]["ProductList"][3]["ID"];
            break;
            case '4':
            $produk =@$ajgjuga[0]["ProductList"][4]["ID"];
            break;
            case '5':
            $produk =@$ajgjuga[0]["ProductList"][5]["ID"];
            break;
            case '6':
            $produk =@$ajgjuga[0]["ProductList"][6]["ID"];
            break;
            case '7':
            $produk =@$ajgjuga[0]["ProductList"][7]["ID"];
            break;
            case '8':
            $produk =@$ajgjuga[0]["ProductList"][8]["ID"];
            break;
            case '9':
            $produk =@$ajgjuga[0]["ProductList"][9]["ID"];
            break;
            case '10':
            $produk =@$ajgjuga[0]["ProductList"][10]["ID"];
            break;
            case '11':
            $produk =@$ajgjuga[0]["ProductList"][11]["ID"];
            break;
            case '12':
            $produk =@$ajgjuga[0]["ProductList"][12]["ID"];
            break;
            case '13':
            $produk =@$ajgjuga[0]["ProductList"][13]["ID"];
            break;
            case '14':
            $produk =@$ajgjuga[0]["ProductList"][14]["ID"];
            break;
            case '15':
            $produk =@$ajgjuga[0]["ProductList"][15]["ID"];
            break;
            case '16':
            $produk =@$ajgjuga[0]["ProductList"][16]["ID"];
            break;
            case '17':
            $produk =@$ajgjuga[0]["ProductList"][17]["ID"];
            break;
            case '18':
            $produk =@$ajgjuga[0]["ProductList"][18]["ID"];
            break;
            case '19':
            $produk =@$ajgjuga[0]["ProductList"][19]["ID"];
            break;
            case '20':
            $produk =@$ajgjuga[0]["ProductList"][20]["ID"];
            break;
            default:
                goto searchproduk;
                break;
    }
    echo @color('yellow', "JUMLAH : ");
    $qty = trim(fgets(STDIN));
    masal2xxx:
echo "Masukkan kode toko: ";
    $kodetoko = trim(fgets(STDIN));
    $password = "Tayo123!";
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal2xxx;
}
$lines = file($file, FILE_IGNORE_NEW_LINES);
print_r($lines);
echo "Start baris ke : ";
$start = trim(fgets(STDIN));
echo "Sampai baris ke : ";

$endd = trim(fgets(STDIN));
$filex = retrieveText($file, $start, $endd);

$list = explode("\n", str_replace("\r", "", $filex));

$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";
    unlink('nganue.txt');

    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    $vocer = trim($akunxx[1]);

    $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';

$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);

$respi = json_decode($verif[1]);

                $respid = $respi->ResponseID;
                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
               $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);


                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $RegionId = $cok[0]->RegionId;
                $getscid = curlx('https://api.klikindomaret.com/api/ShoppingCart/GetLastestShop?customerID='.$ID.'&regionID='.$RegionId, null, $kuntul);
                //echo "$getscid[1]\n";
                $za = json_decode($getscid[1]);
                if (strpos($getscid[1], '"Message":"An error has occurred."')) {
                    echo @color('red', "ERROR KAK\n");
                } else {
                $scid = $za[0];
                if ($scid !== []) {
                    $SCID = $scid;
                }
                $getaddress = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId='.$ID, null, $kuntul2);
               
                        if ($getaddress[1] == '[]') {

$addid = '00000000-0000-0000-0000-000000000000';
                        } else {
$addidx = json_decode($getaddress[1]);
                        $addid = $addidx[0]->ID;
                        $longe = $addidx[0]->Longitude;
                        $late = $addidx[0]->Latitude;
                        }
                        $setaddress = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/SetAddressTypeAndDefaultStore?mfp_id='.$respid.'&isChangeAddress=False&ShoppingCartID='.$scid, '{"CustomerID":"'.$ID.'","AddressType":0,"StoreCode":"'.$kodetoko.'","StoreCodeDest":""}', $kuntul2);
                echo "$setaddress[1]\n";
                
                $setaddress2 = curlx('https://api.klikindomaret.com/api/ShoppingCart/ReCheckStockAllItem?ShoppingCartID='.$scid.'&StoreCode='.$kodetoko.'&AddressType=0&CustomerAddressID='.$addid.'&CustomerID='.$ID.'&StoreCodeDest=&CustomerLatitude=&CustomerLongitude=', null, $kuntul);
                
                        $addproduk = curlx('https://api.klikindomaret.com/api/ShoppingCart/ModifyCart?regionID='.$RegionId.'&scId=&cId='.$ID.'&cartRef=mobile&mod=add&id=&isPair=false&mfp_id='.$respid.'&qty='.$qty.'&pId='.$produk.'&Origin=Android&NearestStoreLocation=&ChildDOB=&CustomerLatitude=&CustomerLongitude=&StoreCode='.$kodetoko.'&StoreCodeDest=', null, $kuntul);
                        if (strpos($addproduk[1], '"Success":true')) {
$SCID = json_decode($addproduk[1])[0]->ResponseID;
$stt = json_decode($addproduk[1])[0]->Message;
                echo @color('green', "$stt\n");
                        } else {
$stt = json_decode($addproduk[1])[0]->ErrorMessage;
$stt1 = json_decode($addproduk[1])[0]->ResponseObject->Items[0]->QtyOrder;
$stt2 = json_decode($addproduk[1])[0]->ResponseObject->Items[0]->QtyAvailable;
echo @color('red', "$stt\n");
echo @color('red', "Jumlah Order : $stt1\n");
echo @color('red', "Jumlah Stock : $stt2\n");

                        }
                        
                        $DEVICE_ID = urut(16);
                $cekk = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$SCID.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$kodetoko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                $json = json_decode($cekk[1]);
                $tokonejon = $json[0]->CheckStockModel->StoreCode;
                $tokonejon1 = $json[0]->CheckStockModel->StoreName;
                $tokonejon2 = $json[0]->CheckStockModel->StoreAddress;
                $storeid = $json[0]->CheckStockModel->StoreID;
                $RegionID = $json[0]->CheckStockModel->RegionID;
                $DistrictID = $json[0]->CheckStockModel->DistrictID;
                $gettoko = curlx('https://api.klikindomaret.com/api/Store/GetAllStoreByCode?storeCode='.$kodetoko.'&customerLatitude=-6.78542505&customerLongitude=112.19929015', null, $kuntul);
                $ZipCode = json_decode($gettoko[1])[0]->ZipCode;
                echo @color('nevy', "KODE TOKO : $tokonejon\n");
                echo @color('nevy', "NAMA TOKO : $tokonejon1\n");
                echo @color('nevy', "ALAMAT TOKO : $tokonejon2\n");
                foreach($json[0]->CartItemNotification->Items as $mydata) {
                    $cx = $mydata;
                    foreach($cx->ShoppingCartItems as $myxxx) {
                        $idne = $myxxx->Quantity;
                        $prduk = $myxxx->ProductDescription;
                        echo "$prduk == $idne\n";

                    }
                }
                    }
                    } else {
                echo "$responx\n";
            }
$no++;
}
echo @color('yellow', "TAMBAH LAGI (y / n )? ");
                        $againx = trim(fgets(STDIN));
                        if(strtolower($againx) == 'y') {
goto pilihprodukx;
                        }
    goto awalmula;
        break;
    case '8':
        masalxccxx:
        echo "Masukkan kode toko: ";
    $kodetoko = trim(fgets(STDIN));
    $password = "Tayo123!";
        echo "[+] Input File: ";
$file = trim(fgets(STDIN));
echo @color('yellow', "DAFTAR HIDANGAN :\n");
                echo @color('yellow', "[1] Antar\n");
                echo @color('yellow', "[2] Ambil\n");
                echo @color('yellow', "pilih : ");
                $ambil = trim(fgets(STDIN));
                if ($ambil == '1') {
                    goto khususantar;
                }
                echo @color('yellow', "TANGGAL Ambil : ");
                        $tgle = trim(fgets(STDIN));
                        echo @color('yellow', "JAM AMBIL :\n");
                        echo @color('yellow', "[1] 07:00-07:59\n");
                        echo @color('yellow', "[2] 08:00-08:59\n");
                        echo @color('yellow', "[3] 09:00-09:59\n");
                        echo @color('yellow', "[4] 10:00-10:59\n");
                        echo @color('yellow', "[5] 11:00-11:59\n");
                        echo @color('yellow', "[6] 12:00-12:59\n");
                        echo @color('yellow', "[7] 13:00-13:59\n");
                        echo @color('yellow', "[8] 14:00-14:59\n");
                        echo @color('yellow', "[9] 15:00-15:59\n");
                        echo @color('yellow', "[10] 16:00-16:59\n");
                        echo @color('yellow', "[11] 17:00-17:59\n");
                        echo @color('yellow', "[12] 18:00-18:59\n");
                        echo @color('yellow', "[13] 19:00-19:59\n");
                        echo @color('yellow', "[14] 20:00-20:59\n");
                        echo @color('yellow', "pilih : ");
                        $jamambil = trim(fgets(STDIN));
                        echo @color('yellow', "DAFTAR HIDANGAN :\n");
    echo @color('yellow', "[1] Isaku\n");
    echo @color('yellow', "[2] BCA\n");
    echo @color('yellow', "[3] REKPON\n");
    echo @color('yellow', "pilih : ");
    $bayar = trim(fgets(STDIN));
                        khususantar:
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masalxccxx;
}
$list = explode("\n", str_replace("\r", "", file_get_contents($file)));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";
    unlink('nganue.txt');

    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    $vocer = trim($akunxx[1]);

    $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';

$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$password.'"}', $kuntul2x);

$respi = json_decode($verif[1]);

                $respid = $respi->ResponseID;
                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
               $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);


                $responx = $cekvcne[1];
                if (strpos($responx, '"IsActivated":true')) {
                $cok = json_decode($responx);
                $ID = $cok[0]->ID;
                $RegionId = $cok[0]->RegionId;
                $getscid = curlx('https://api.klikindomaret.com/api/ShoppingCart/GetLastestShop?customerID='.$ID.'&regionID='.$RegionId, null, $kuntul);
                //echo "$getscid[1]\n";
                $za = json_decode($getscid[1]);
                if (strpos($getscid[1], '"Message":"An error has occurred."')) {
                    echo @color('red', "ERROR KAK\n");
                } else {

                $scid = $za[0];
                if ($scid !== []) {
                    $SCID = $scid;
                }
                $getaddress = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId='.$ID, null, $kuntul2);
               
                        if ($getaddress[1] == '[]') {

$addid = '00000000-0000-0000-0000-000000000000';
                        } else {
$addidx = json_decode($getaddress[1]);
                        $addid = $addidx[0]->ID;
                        $longe = $addidx[0]->Longitude;
                        $late = $addidx[0]->Latitude;


                        }
                
                switch ($ambil) {
                    case '1':
                    $setaddress = curlx('https://api.klikindomaret.com/api/ShoppingCart/ReCheckStockAllItem?ShoppingCartID='.$scid.'&StoreCode=&AddressType=1&CustomerAddressID='.$addid.'&CustomerID='.$ID.'&StoreCodeDest=&CustomerLatitude='.$late.'&CustomerLongitude='.$longe, null, $kuntul);
                    echo "$setaddress[1]\n";
                        
                        break;
                    
                    case '2':
                           $setaddress = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/SetAddressTypeAndDefaultStore?mfp_id='.$respid.'&isChangeAddress=False&ShoppingCartID='.$scid, '{"CustomerID":"'.$ID.'","AddressType":0,"StoreCode":"'.$kodetoko.'","StoreCodeDest":""}', $kuntul2);
                echo "$setaddress[1]\n";
                
                $setaddress2 = curlx('https://api.klikindomaret.com/api/ShoppingCart/ReCheckStockAllItem?ShoppingCartID='.$scid.'&StoreCode='.$kodetoko.'&AddressType=0&CustomerAddressID='.$addid.'&CustomerID='.$ID.'&StoreCodeDest=&CustomerLatitude=&CustomerLongitude=', null, $kuntul);
                        break;
                }
                
                
        

$DEVICE_ID = urut(16);
                $cekk = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$SCID.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$kodetoko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                
                $json = json_decode($cekk[1]);
                $tokonejon = $json[0]->CheckStockModel->StoreCode;
                $tokonejon1 = $json[0]->CheckStockModel->StoreName;
                $tokonejon2 = $json[0]->CheckStockModel->StoreAddress;
                $storeid = $json[0]->CheckStockModel->StoreID;
                $RegionID = $json[0]->CheckStockModel->RegionID;
                $DistrictID = $json[0]->CheckStockModel->DistrictID;
                $gettoko = curlx('https://api.klikindomaret.com/api/Store/GetAllStoreByCode?storeCode='.$kodetoko.'&customerLatitude=-6.78542505&customerLongitude=112.19929015', null, $kuntul);
                $ZipCode = json_decode($gettoko[1])[0]->ZipCode;
                echo @color('nevy', "KODE TOKO : $tokonejon\n");
                echo @color('nevy', "NAMA TOKO : $tokonejon1\n");
                echo @color('nevy', "ALAMAT TOKO : $tokonejon2\n");
                foreach($json[0]->CartItemNotification->Items as $mydata) {
                    $cx = $mydata;
                    foreach($cx->ShoppingCartItems as $myxxx) {
                        $idne = $myxxx->Quantity;
                        $prduk = $myxxx->ProductDescription;
                        echo "$prduk == $idne\n";

                    }
                }
                echo @color('yellow', "PRODUK BENAR (y / n )? ");
                        $againx = trim(fgets(STDIN));
                        if(strtolower($againx) == 'y') {
goto cekupon;
                        } else {
                        save($nomor.";".$vocer."\n", 'akunskipco.txt');
                        echo @color('yellow', "Tersimpan di akunskipco.txt\n");
goto nyekip;
                        }
cekupon:
                 if ($json[0]->CartItemNotification->ListCouponPotonganTotal == []) {
                    echo @color('red', "KUPON KOSONG KAK\n");
                } else {
                    $jumlah = count($json[0]->CartItemNotification->ListCouponPotonganTotal);
                echo @color('yellow', "JUMLAH KUPON NEMPEL : ");
                echo @color('green', "$jumlah\n");
                foreach($json[0]->CartItemNotification->ListCouponPotonganTotal as $mydata) {
                    $kupon = $mydata->CouponMask;
                    $desk = $mydata->CouponMekanisme;
                    //echo "Nama Kupon : $kupon\n";
                    echo @color('yellow', "Nama Kupon   : ");
                    echo @color('green', "$kupon\n");
                    echo @color('yellow', "Keterangan   : ");
                    echo @color('blue', "$desk\n");
                    
                }

                }

                        inputvocer2:
                echo @color('blue', "Tempel kupon : "); 
                echo @color('nevy', "$vocer\n");    
                $datane = '{"Code":"'.$vocer.'","ShoppingCartID":"'.$SCID.'","CustomerID":"'.$ID.'","RegionID":"'.$RegionId.'","SalesOrderNo":"","Nominal":"","DeviceID":"'.$DEVICE_ID.'","ShoppingCartPackageID":null}';
                $kupon = curlx('https://api.klikindomaret.com/api/Voucher/BookingVoucherCoupon?mfp_id='.$respid, $datane, $kuntul);
                $kimak = json_decode($kupon[1]);
                $ket = $kimak->ResponseObject->keterangan;
                if (strpos($kupon[1], '"status":"SUCCESS"')) {
                    echo @color('green', "BERHASIL GAN\n");
                    echo @color('nevy', "$ket\n");
                    echo @color('blue', "$nomor\n");
                    
                } else {
                    echo @color('red', "$ket\n");
                    

                }
                echo @color('yellow', "INPUT VOCER LAGI ? (y / n ) ");
                        $againexa = trim(fgets(STDIN));
                        if(strtolower($againexa) == 'y') {
echo @color('yellow', "Masukkan Vocer : ");
$vocernew = trim(fgets(STDIN));
$datane = '{"Code":"'.$vocernew.'","ShoppingCartID":"'.$SCID.'","CustomerID":"'.$ID.'","RegionID":"'.$RegionId.'","SalesOrderNo":"","Nominal":"","DeviceID":"'.$DEVICE_ID.'","ShoppingCartPackageID":null}';
                $kupon = curlx('https://api.klikindomaret.com/api/Voucher/BookingVoucherCoupon?mfp_id='.$respid, $datane, $kuntul);
                $kimak = json_decode($kupon[1]);
                $ket = $kimak->ResponseObject->keterangan;
                if (strpos($kupon[1], '"status":"SUCCESS"')) {
                    echo @color('green', "BERHASIL GAN\n");
                    echo @color('nevy', "$ket\n");
                    echo @color('blue', "$nomor\n");
                    
                } else {
                    echo @color('red', "$ket\n");
                    

                }
                        }
                
                switch ($ambil) {
                    case '1':
                    $ceksk = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$SCID.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$kodetoko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                    $gettime = curlx('https://api.klikindomaret.com/api/Setting/Get?SettingKey=STORE_PREPARATION_TIME', null, $kuntul);

                        $gett = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId='.$ID, null, $kuntul2);

                        $addidx = json_decode($gett[1]);
                        $addid = $addidx[0]->ID;
                        $ZipCode = $addidx[0]->ZipCode;
                        $DistrictId = $addidx[0]->DistrictId;
                    $getmboh = curlx('https://api.klikindomaret.com/api/ShoppingCart/GetShippingMethod/'.$SCID.'?customerId='.$ID.'&isVIrtual=false&regionID='.$RegionId.'&CustomerAddressID=00000000-0000-0000-0000-000000000000&IsParcelView=false&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                    $ceksek = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$SCID.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$kodetoko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                        
                        $poss = curlx ('https://api.klikindomaret.com/api/ShoppingCart/StoreZoneSlotCalculate?mfp_id='.$respid, '{"ShoppingCartID":"'.$SCID.'","IsDelivery":true,"CustomerAddressID":"'.$addid.'","DeviceID":"'.$DEVICE_ID.'","ShoppingcartPromoPackagesID":null}',$kuntul);
                        $cekasek = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$SCID.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$kodetoko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);
                        $poss2 = curlx ('https://api.klikindomaret.com/api/ShoppingCart/StoreZoneSlotCalculate?mfp_id='.$respid, '{"ShoppingCartID":"'.$SCID.'","IsDelivery":true,"CustomerAddressID":"'.$addid.'","DeviceID":"'.$DEVICE_ID.'","ShoppingcartPromoPackagesID":null}',$kuntul);
                        $possas = curlx ('https://api.klikindomaret.com/api/ShoppingCart/StoreZoneSlotCalculate?mfp_id='.$respid, '{"ShoppingCartID":"'.$SCID.'","IsDelivery":true,"CustomerAddressID":"'.$addid.'","DeviceID":"'.$DEVICE_ID.'","ShoppingcartPromoPackagesID":null}',$kuntul);
                        $possass = curlx ('https://api.klikindomaret.com/api/ShoppingCart/StoreZoneSlotCalculate?mfp_id='.$respid, '{"ShoppingCartID":"'.$SCID.'","IsDelivery":true,"CustomerAddressID":"'.$addid.'","DeviceID":"'.$DEVICE_ID.'","ShoppingcartPromoPackagesID":null}',$kuntul);
                        $possaa = curlx ('https://api.klikindomaret.com/api/ShoppingCart/StoreZoneSlotCalculate?mfp_id='.$respid, '{"ShoppingCartID":"'.$SCID.'","IsDelivery":true,"CustomerAddressID":"'.$addid.'","DeviceID":"'.$DEVICE_ID.'","ShoppingcartPromoPackagesID":null}',$kuntul);

                        
                        
                        $jsone = json_decode($possaa[1]);
                        $ax1="0";
                        $ax2="10";
                        echo @color('yellow', "TANGGAL : \n");
                        for($ax1; $ax1 < $ax2; $ax1++){
                        $tanggale= $jsone->ResponseObject->ListSlot[$ax1]->DateLabel;
                        $tanggalex= $jsone->ResponseObject->ListSlot[$ax1]->DateDayLabel;
                        echo @color('nevy', "[$ax1]");
                        echo "=> ";
                        echo @color('yellow', "$tanggale");
                        echo "\n";
                        if($tanggale == ""){
break;
                        }
                        }
                        echo @color('yellow', "PILIH : ");
                        $tglee = trim(fgets(STDIN));
                        switch ($tglee) {
case '0':
    $tgle = $jsone->ResponseObject->ListSlot[0]->DateSlot;
    $tagalex = $jsone->ResponseObject->ListSlot[0]->DateLabel;
    break;
    case '1':
    $tgle = $jsone->ResponseObject->ListSlot[1]->DateSlot;
    $tagalex = $jsone->ResponseObject->ListSlot[1]->DateLabel;
    break;
    case '2':
    $tgle = $jsone->ResponseObject->ListSlot[2]->DateSlot;
    $tagalex = $jsone->ResponseObject->ListSlot[2]->DateLabel;
    break;
    case '3':
    $tgle = $jsone->ResponseObject->ListSlot[3]->DateSlot;
    $tagalex = $jsone->ResponseObject->ListSlot[3]->DateLabel;
    break;
    case '4':
    $tgle = $jsone->ResponseObject->ListSlot[4]->DateSlot;
    $tagalex = $jsone->ResponseObject->ListSlot[4]->DateLabel;
    break;
    case '5':
    $tgle = $jsone->ResponseObject->ListSlot[5]->DateSlot;

    $tagalex = $jsone->ResponseObject->ListSlot[5]->DateLabel;
    break;
                        }
                        $jumuke = explode('T', $tgle);
                        $tgljmk = $jumuke[0];
                        echo @color('yellow', "$tagalex\n");
                        $axx1="0";
                        $axx2="14";
                        
                        echo @color('yellow', "JAM ANTAR :\n");
                        for($axx1; $axx1 < $axx2; $axx1++){
                        $xs = $axx1+1;
                        $jame= $jsone->ResponseObject->ListSlot[$tglee]->SlotPengiriman[$axx1]->SlotLabel;
                        $pesane= $jsone->ResponseObject->ListSlot[$tglee]->SlotPengiriman[$axx1]->Message;
                        echo @color('nevy', "[$xs]");
                        echo "=> ";
                        echo @color('yellow', "$jame, ");
                        echo @color('red', "$pesane");
                        echo "\n";
                        if($jame == ""){
break;
                        }
                        }
                        
                        
                        echo @color('yellow', "pilih : ");
                        $jamambil = trim(fgets(STDIN));
                        switch ($jamambil) {
case '1':
   $jmbt = "07:00";
    break;
case '2':
   $jmbt = "08:00";
    break;
    case '3':
   $jmbt = "09:00";
    break;
    case '4':
   $jmbt = "10:00";
    break;
    case '5':
   $jmbt = "11:00";
    break;
    case '6':
   $jmbt = "12:00";
    break;
    case '7':
   $jmbt = "13:00";
    break;
    case '8':
   $jmbt = "14:00";
    break;
    case '9':
   $jmbt = "15:00";
    break;
    case '10':
   $jmbt = "16:00";
    break;
    case '11':
   $jmbt = "17:00";
    break;
    case '12':
   $jmbt = "18:00";
    break;
    case '13':
   $jmbt = "19:00";
    break;
    case '14':
   $jmbt = "20:00";
    break;
                        }
                        $cekasek = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId='.$SCID.'&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$kodetoko.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.$DEVICE_ID.'&ShoppingcartPromoPackagesID=', null, $kuntul);

                        if (strpos($possaa[1], '"IsSuccess":true')) {
$gass = curlx('https://api.klikindomaret.com/api/Cart/UpdateShippingMetohod?mfp_id='.$respid, '{"AddressType":1,"AddressIDStore":"'.$addid.'","IStoreShippingDate":"'.$tgljmk.'T00:00:00","IStorePreferTimeDelivery":"'.$jmbt.'","IStorePreferTimeShipping":"'.$jmbt.'","IPPServiceType":"","IsIPP":false,"AddressIDPlaza":"'.$addid.'","IPlazaShippingDate":"","IPPStoreCode":"","ShoppingCartID":"'.$SCID.'","IsDelivery":1,"RegionID":"'.$RegionId.'","IStoreDeliveryType":"REGULER","IStoreExpressOfflineLimit":0,"IStoreExpressDeliveryServiceFee":0,"MobileIstore":1,"MobileIPlaza":0,"PlazaDeliveryType":"","ShoppingcartPromoPackagesID":null,"DistrictId":'.$DistrictId.',"ShopZipCode":"'.$ZipCode.'"}', $kuntul);
if (strpos($gass[1], '"Message":"success"')) {
    
    $createpay = curlx('https://api.klikindomaret.com/api/Payment/CreateId?Id='.$SCID, null, $kuntul);

    $headers1 = array();
                    $headers1[] = 'Host: payment.klikindomaret.com';
                    $headers1[] = 'user-agent: klikindomaretmobile';
                    $headers1[] = 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8';
                    for ($i=0; $i < 3; $i++) { 
                        
                    
                    $getpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments?pcid=klikindomaret&trxtype=createorder&SCTPCID='.$SCID.'&LAT=null&LONG=null&DeviceID='.urut(16), null, $headers1);
               
                    $linkx = get_between($getpay[1], '"hdTotalAmount" value="', '"');
                    echo @color('nevy', "TOTAL : $linkx\n");
                    }





    echo @color('yellow', "DAFTAR HIDANGAN :\n");
    echo @color('yellow', "[1] Isaku\n");
    echo @color('yellow', "[2] BCA\n");
    echo @color('yellow', "[3] REKPON\n");
    echo @color('yellow', "pilih : ");
    $bayar = trim(fgets(STDIN));
    switch ($bayar) {
        case '1':
            echo "Total : $linkx\n";
            $parcel1 = array();
                $parcel1[] = 'Host: payment.klikindomaret.com';
                $parcel1[] = 'Accept: */*';
                $parcel1[] = 'Origin: https://payment.klikindomaret.com';
                $parcel1[] = 'user-agent: klikindomaretmobile';
                $parcel1[] = 'content-type: application/json; charset=UTF-8';
                $parcel1[] = 'x-requested-with: XMLHttpRequest';
                $padrcel1[] = 'Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7';
                    $submitpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments/SubmitPayment', '{"PaymentTypeCode":"BPISAKU","TotalAmount":"'.$linkx.'","Token":"","IsCoupon":"0","IsPaymentPartial":0,"WalletAmmount":"0","WalletPassword":"","IsVA":false,"PaymentTypeName":"i.Saku","useCoin":false,"potentialCoinShopee":"","Source":"Android"}', $parcel1);
                    
                    $k = json_decode($submitpay[1])->Trxid;
                    $lk = str_replace('TIM', '', $k);
                    unlink('nganue.txt');
                   echo shell_exec("xdg-open 'https://barcode.tec-it.com/barcode.ashx?data='$lk'&code=Code128&multiplebarcodes=false&translate-esc=true&unit=Fit&dpi=96&imagetype=Gif&rotation=0&color=%23000000&bgcolor=%23ffffff&codepage=Default&qunit=Mm&quiet=10&hidehrt=False'");
                   
                   $sttpay = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);
                   sleep(5);
                   $sttp = json_decode($sttpay[1]);
                   $stbyr = $sttp[0]->StatusPembayaran;
                   $sttype = $sttp[0]->PaymentTypeName;
                   $sttexp = $sttp[0]->PaymentExpiredDate;
                   $TransactionCode = $sttp[0]->TransactionCode;
                   $jenenge = $sttp[0]->CustomerContactName;
                   $totale = $sttp[0]->Total;
                   $PaymentAccountID = $sttp[0]->PaymentAccountID;
                   if ($stbyr == null) {
                       $sttbayar = 'Segera cek';
                   } else {
                    $sttbayar = $stbyr;
                   }
                   echo @color('yellow', "Kode Transaksi: ");
                   echo @color('nevy', "$TransactionCode\n");
                   echo @color('yellow', "Status Pembayaran: ");
                   echo @color('nevy', "$sttbayar\n");
                   echo @color('yellow', "Tipe Pembayaran: ");
                   echo @color('nevy', "$sttype\n");

                   echo @color('yellow', "PaymentExpiredDate: ");
                   echo @color('nevy', "$sttexp\n");
                   save("KodeTransaksi: ".$TransactionCode."|Nama: ".$jenenge."|Nomor: ".$nomor."|KodeToko: ".$tokonejon."|Total: ".$totale."\n", 'transaksiIsaku.txt');
                    
             
            break;
            case '2':
              $parcel1 = array();
                $parcel1[] = 'Host: payment.klikindomaret.com';
                $parcel1[] = 'Accept: */*';
                $parcel1[] = 'Origin: https://payment.klikindomaret.com';
                $parcel1[] = 'user-agent: klikindomaretmobile';
                $parcel1[] = 'content-type: application/json; charset=UTF-8';
                $parcel1[] = 'x-requested-with: XMLHttpRequest';
                $padrcel1[] = 'Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7';
                    $submitpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments/SubmitPayment', '{"PaymentTypeCode":"702","TotalAmount":"'.$linkx.'","Token":"","IsCoupon":"1","IsPaymentPartial":0,"WalletAmmount":"0","WalletPassword":"","IsVA":false,"Source":"Android"}', $parcel1);
                    $sttpay = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);
                   $sttp = json_decode($sttpay[1]);
                   $stbyr = $sttp[0]->StatusPembayaran;
                   $sttype = $sttp[0]->PaymentTypeName;
                   $sttexp = $sttp[0]->PaymentExpiredDate;
                   $TransactionCode = $sttp[0]->TransactionCode;
                   $jenenge = $sttp[0]->CustomerContactName;
                   $totale = $sttp[0]->Total;
                   $PaymentAccountID = $sttp[0]->PaymentAccountID;
                   if ($stbyr == null) {
                       $sttbayar = 'Segera cek';
                   } else {
                    $sttbayar = $stbyr;
                   }
                   echo @color('yellow', "Kode Transaksi: ");
                   echo @color('nevy', "$TransactionCode\n");
                   echo @color('yellow', "Status Pembayaran: ");
                   echo @color('nevy', "$sttbayar\n");
                   echo @color('yellow', "Tipe Pembayaran: ");
                   echo @color('nevy', "$sttype\n");
                   echo @color('yellow', "KODE VA: ");
                   echo @color('nevy', "$PaymentAccountID\n");
                   echo @color('yellow', "PaymentExpiredDate: ");
                   echo @color('nevy', "$sttexp\n");
                   save("KodeTransaksi: ".$TransactionCode."|Nama: ".$jenenge."|Nomor: ".$nomor."|KodeToko: ".$tokonejon."|Total: ".$totale."|Kode VA :".$PaymentAccountID."\n", 'transaksiBCA.txt');
                    
                    unlink('nganue.txt');
                break;
                case '3':
                echo @color('yellow', "Masukkan token: ");
                $tokentt = trim(fgets(STDIN));
                    $parcel1 = array();
                $parcel1[] = 'Host: payment.klikindomaret.com';
                $parcel1[] = 'Accept: */*';
                $parcel1[] = 'Origin: https://payment.klikindomaret.com';
                $parcel1[] = 'user-agent: klikindomaretmobile';
                $parcel1[] = 'content-type: application/json; charset=UTF-8';
                $parcel1[] = 'x-requested-with: XMLHttpRequest';
                $padrcel1[] = 'Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7';
                    $submitpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments/SubmitPayment', '{"PaymentTypeCode":"RKPON","TotalAmount":"'.$linkx.'","Token":"'.$tokentt.'","IsCoupon":"0","IsPaymentPartial":0,"WalletAmmount":"0","WalletPassword":"","IsVA":false,"PaymentTypeName":"CIMB Niaga Rekening Ponsel","useCoin":false,"potentialCoinShopee":"","Source":"Android"}', $parcel1);
                    $sttpay = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);
                   $sttp = json_decode($sttpay[1]);
                   $stbyr = $sttp[0]->StatusPembayaran;
                   $sttype = $sttp[0]->PaymentTypeName;
                   $sttexp = $sttp[0]->PaymentExpiredDate;
                   $TransactionCode = $sttp[0]->TransactionCode;
                   $jenenge = $sttp[0]->CustomerContactName;
                   $totale = $sttp[0]->Total;
                   $PaymentAccountID = $sttp[0]->PaymentAccountID;
                   if ($stbyr == null) {
                       $sttbayar = 'Segera cek';
                   } else {
                    $sttbayar = $stbyr;
                   }
                   echo @color('yellow', "Kode Transaksi: ");
                   echo @color('nevy', "$TransactionCode\n");
                   echo @color('yellow', "Status Pembayaran: ");
                   echo @color('nevy', "$sttbayar\n");
                   echo @color('yellow', "Tipe Pembayaran: ");
                   echo @color('nevy', "$sttype\n");
                   echo @color('yellow', "PaymentExpiredDate: ");
                   echo @color('nevy', "$sttexp\n");
                   save("KodeTransaksi: ".$TransactionCode."|Nama: ".$jenenge."|Nomor: ".$nomor."|KodeToko: ".$tokonejon."|Total: ".$totale."|Kode VA :".$PaymentAccountID."\n", 'transaksiREKPON.txt');
                    unlink('nganue.txt');
                    break;





    }
} else {
    echo @color('red', "$gass[1]\n");
}
                        } else {
echo @color('red', "$possaa[1]\n");

                        }
                        break;
                    case '2':
                        $gett = curlx('https://account-api-v2.klikindomaret.com/api/CustomerAddress/GetByCustomerId?custId='.$ID, null, $kuntul2);
                        if ($gett[1] == '[]') {

$addid = '00000000-0000-0000-0000-000000000000';
                        } else {
$addidx = json_decode($gett[1]);
                        
                        $addid = $addidx[0]->ID;


                        }

                        
                        
                        $poss = curlx ('https://api.klikindomaret.com/api/ShoppingCart/StoreZoneSlotCalculate?mfp_id='.$respid, '{"ShoppingCartID":"'.$SCID.'","IsDelivery":false,"StoreID":"'.$storeid.'","DeviceID":"'.$DEVICE_ID.'","ShoppingcartPromoPackagesID":null}',$kuntul);
                        
                        switch ($jamambil) {
case '1':
   $jmbt = "07:00";
    break;
case '2':
   $jmbt = "08:00";
    break;
    case '3':
   $jmbt = "09:00";
    break;
    case '4':
   $jmbt = "10:00";
    break;
    case '5':
   $jmbt = "11:00";
    break;
    case '6':
   $jmbt = "12:00";
    break;
    case '7':
   $jmbt = "13:00";
    break;
    case '8':
   $jmbt = "14:00";
    break;
    case '9':
   $jmbt = "15:00";
    break;
    case '10':
   $jmbt = "16:00";
    break;
    case '11':
   $jmbt = "17:00";
    break;
    case '12':
   $jmbt = "18:00";
    break;
    case '13':
   $jmbt = "19:00";
    break;
    case '14':
   $jmbt = "20:00";
    break;
                        }


                        if (strpos($poss[1], '"IsSuccess":true')) {
$gass = curlx('https://api.klikindomaret.com/api/Cart/UpdateShippingMetohod?mfp_id='.$respid, '{"AddressType":0,"AddressIDStore":"'.$addid.'","IStoreShippingDate":"'.date("Y-m").'-'.$tgle.'T00:00:00","IStorePreferTimeDelivery":"'.$jmbt.'","IStorePreferTimeShipping":"'.$jmbt.'","IPPServiceType":"","IsIPP":false,"AddressIDPlaza":"'.$addid.'","IPlazaShippingDate":"","IPPStoreCode":"","ShoppingCartID":"'.$SCID.'","IsDelivery":0,"RegionID":"'.$RegionID.'","IStoreDeliveryType":"REGULER","IStoreExpressOfflineLimit":0,"IStoreExpressDeliveryServiceFee":0,"MobileIstore":1,"MobileIPlaza":0,"PlazaDeliveryType":"","ShoppingcartPromoPackagesID":null,"DistrictId":'.$DistrictID.',"StoreID":"'.$storeid.'","ShopZipCode":"'.$ZipCode.'"}', $kuntul);
if (strpos($gass[1], '"Message":"success"')) {
    
    $createpay = curlx('https://api.klikindomaret.com/api/Payment/CreateId?Id='.$SCID, null, $kuntul);
    $headers1 = array();
                    $headers1[] = 'Host: payment.klikindomaret.com';
                    $headers1[] = 'user-agent: klikindomaretmobile';
                    $headers1[] = 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8';
                    for ($i=0; $i < 3; $i++) { 
                        
                    
                    $getpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments?pcid=klikindomaret&trxtype=createorder&SCTPCID='.$SCID.'&LAT=null&LONG=null&DeviceID='.urut(16), null, $headers1);
               
                    $linkx = get_between($getpay[1], '"hdTotalAmount" value="', '"');
                    echo @color('nevy', "TOTAL : $linkx\n");
                    }




    
    switch ($bayar) {
        case '1':
        echo "Total : $linkx\n";
            $parcel1 = array();
                $parcel1[] = 'Host: payment.klikindomaret.com';
                $parcel1[] = 'Accept: */*';
                $parcel1[] = 'Origin: https://payment.klikindomaret.com';
                $parcel1[] = 'user-agent: klikindomaretmobile';
                $parcel1[] = 'content-type: application/json; charset=UTF-8';
                $parcel1[] = 'x-requested-with: XMLHttpRequest';
                $padrcel1[] = 'Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7';
                    $submitpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments/SubmitPayment', '{"PaymentTypeCode":"BPISAKU","TotalAmount":"'.$linkx.'","Token":"","IsCoupon":"0","IsPaymentPartial":0,"WalletAmmount":"0","WalletPassword":"","IsVA":false,"PaymentTypeName":"i.Saku","useCoin":false,"potentialCoinShopee":"","Source":"Android"}', $parcel1);
                    
                    $k = json_decode($submitpay[1])->Trxid;
                    $lk = str_replace('TIM', '', $k);
                    unlink('nganue.txt');
                   echo shell_exec("xdg-open 'https://barcode.tec-it.com/barcode.ashx?data='$lk'&code=Code128&multiplebarcodes=false&translate-esc=true&unit=Fit&dpi=96&imagetype=Gif&rotation=0&color=%23000000&bgcolor=%23ffffff&codepage=Default&qunit=Mm&quiet=10&hidehrt=False'");
                   
                   $sttpay = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);
                   sleep(5);
                   $sttp = json_decode($sttpay[1]);
                   $stbyr = $sttp[0]->StatusPembayaran;
                   $sttype = $sttp[0]->PaymentTypeName;
                   $sttexp = $sttp[0]->PaymentExpiredDate;
                   $TransactionCode = $sttp[0]->TransactionCode;
                   $jenenge = $sttp[0]->CustomerContactName;
                   $totale = $sttp[0]->Total;
                   $PaymentAccountID = $sttp[0]->PaymentAccountID;
                   if ($stbyr == null) {
                       $sttbayar = 'Segera cek';
                   } else {
                    $sttbayar = $stbyr;
                   }
                   echo @color('yellow', "Kode Transaksi: ");
                   echo @color('nevy', "$TransactionCode\n");
                   echo @color('yellow', "Status Pembayaran: ");
                   echo @color('nevy', "$sttbayar\n");
                   echo @color('yellow', "Tipe Pembayaran: ");
                   echo @color('nevy', "$sttype\n");

                   echo @color('yellow', "PaymentExpiredDate: ");
                   echo @color('nevy', "$sttexp\n");
                   save("KodeTransaksi: ".$TransactionCode."|Nama: ".$jenenge."|Nomor: ".$nomor."|KodeToko: ".$tokonejon."|Total: ".$totale."\n", 'transaksiIsaku.txt');
                    
             
            break;
            case '2':
              $parcel1 = array();
                $parcel1[] = 'Host: payment.klikindomaret.com';
                $parcel1[] = 'Accept: */*';
                $parcel1[] = 'Origin: https://payment.klikindomaret.com';
                $parcel1[] = 'user-agent: klikindomaretmobile';
                $parcel1[] = 'content-type: application/json; charset=UTF-8';
                $parcel1[] = 'x-requested-with: XMLHttpRequest';
                $padrcel1[] = 'Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7';
                    $submitpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments/SubmitPayment', '{"PaymentTypeCode":"702","TotalAmount":"'.$linkx.'","Token":"","IsCoupon":"1","IsPaymentPartial":0,"WalletAmmount":"0","WalletPassword":"","IsVA":false,"Source":"Android"}', $parcel1);
                    $sttpay = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);
                   $sttp = json_decode($sttpay[1]);
                   $stbyr = $sttp[0]->StatusPembayaran;
                   $sttype = $sttp[0]->PaymentTypeName;
                   $sttexp = $sttp[0]->PaymentExpiredDate;
                   $TransactionCode = $sttp[0]->TransactionCode;
                   $jenenge = $sttp[0]->CustomerContactName;
                   $totale = $sttp[0]->Total;
                   $PaymentAccountID = $sttp[0]->PaymentAccountID;
                   if ($stbyr == null) {
                       $sttbayar = 'Segera cek';
                   } else {
                    $sttbayar = $stbyr;
                   }
                   echo @color('yellow', "Kode Transaksi: ");
                   echo @color('nevy', "$TransactionCode\n");
                   echo @color('yellow', "Status Pembayaran: ");
                   echo @color('nevy', "$sttbayar\n");
                   echo @color('yellow', "Tipe Pembayaran: ");
                   echo @color('nevy', "$sttype\n");
                   echo @color('yellow', "KODE VA: ");
                   echo @color('nevy', "$PaymentAccountID\n");
                   echo @color('yellow', "PaymentExpiredDate: ");
                   echo @color('nevy', "$sttexp\n");
                   save("KodeTransaksi: ".$TransactionCode."|Nama: ".$jenenge."|Nomor: ".$nomor."|KodeToko: ".$tokonejon."|Total: ".$totale."|Kode VA :".$PaymentAccountID."\n", 'transaksiBCA.txt');
                    
                    unlink('nganue.txt');
                break;
                case '3':
                echo @color('yellow', "Masukkan token: ");
                $tokentt = trim(fgets(STDIN));
                    $parcel1 = array();
                $parcel1[] = 'Host: payment.klikindomaret.com';
                $parcel1[] = 'Accept: */*';
                $parcel1[] = 'Origin: https://payment.klikindomaret.com';
                $parcel1[] = 'user-agent: klikindomaretmobile';
                $parcel1[] = 'content-type: application/json; charset=UTF-8';
                $parcel1[] = 'x-requested-with: XMLHttpRequest';
                $padrcel1[] = 'Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7';
                    $submitpay = curlx('https://payment.klikindomaret.com/paymentcenter/Payments/SubmitPayment', '{"PaymentTypeCode":"RKPON","TotalAmount":"'.$linkx.'","Token":"'.$tokentt.'","IsCoupon":"0","IsPaymentPartial":0,"WalletAmmount":"0","WalletPassword":"","IsVA":false,"PaymentTypeName":"CIMB Niaga Rekening Ponsel","useCoin":false,"potentialCoinShopee":"","Source":"Android"}', $parcel1);
                    $sttpay = curlx('https://api.klikindomaret.com/api/SalesOrder/GetSalesOrderHeaderListByCustomerIdAndSalesOrderNo/null?sortmode=&id='.$ID.'&currPage=1&pageSize=30&no=&mode=0', null, $kuntul);
                   $sttp = json_decode($sttpay[1]);
                   $stbyr = $sttp[0]->StatusPembayaran;
                   $sttype = $sttp[0]->PaymentTypeName;
                   $sttexp = $sttp[0]->PaymentExpiredDate;
                   $TransactionCode = $sttp[0]->TransactionCode;
                   $jenenge = $sttp[0]->CustomerContactName;
                   $totale = $sttp[0]->Total;
                   $PaymentAccountID = $sttp[0]->PaymentAccountID;
                   if ($stbyr == null) {
                       $sttbayar = 'Segera cek';
                   } else {
                    $sttbayar = $stbyr;
                   }
                   echo @color('yellow', "Kode Transaksi: ");
                   echo @color('nevy', "$TransactionCode\n");
                   echo @color('yellow', "Status Pembayaran: ");
                   echo @color('nevy', "$sttbayar\n");
                   echo @color('yellow', "Tipe Pembayaran: ");
                   echo @color('nevy', "$sttype\n");
                   echo @color('yellow', "KODE VA: ");
                   echo @color('nevy', "$PaymentAccountID\n");
                   echo @color('yellow', "PaymentExpiredDate: ");
                   echo @color('nevy', "$sttexp\n");
                   save("KodeTransaksi: ".$TransactionCode."|Nama: ".$jenenge."|Nomor: ".$nomor."|KodeToko: ".$tokonejon."|Total: ".$totale."|Kode VA :".$PaymentAccountID."\n", 'transaksiREKPON.txt');
                    unlink('nganue.txt');
                    break;





    }
} else {
    echo @color('red', "$gass[1]\n");
}
                        } else {
echo @color('red', "$poss[1]\n");

                        }
                        break;
                }

                
            }



} else {
                echo "$responx\n";
            }
            nyekip:
            

$no++;
}
goto awalmula;
        break;
    case '9':
    $pw = "Tayo123!";
    echo "Input kode Voucher: ";
    $vocerx = trim(fgets(STDIN));
    $vocer = strtoupper($vocerx);
    masal22x:
    echo "[+] Input File: ";
$file = trim(fgets(STDIN));
if(empty($file) || !file_exists($file)) {
    echo"[+] File not found!\n";
    goto masal22x;
}
$lines = file($file, FILE_IGNORE_NEW_LINES);
print_r($lines);
echo "Start baris ke : ";
$start = trim(fgets(STDIN));
echo "Sampai baris ke : ";

$endd = trim(fgets(STDIN));
$filex = retrieveText($file, $start, $endd);

$list = explode("\n", str_replace("\r", "", $filex));
$no = 1;
$total = count($list)-1;
$success = 0;
$error = 0;
foreach ($list as $kode) {
    if(empty($kode)) {
                continue;
            }
            
    echo "Total: $no/$total\n";

    $akunxx = explode(';', trim($kode));
    $nomor = trim($akunxx[0]);
    echo @color('nevy', "$nomor\n");
    unlink('nganue.txt');

    $kuntul = array();
$kuntul[] = 'Content-Type: application/json';
$kuntul[] = 'Host: api.klikindomaret.com';
$kuntul[] = 'User-Agent: okhttp/3.12.1';
$kuntul2x = array();
$kuntul2x[] = 'Content-Type: application/json';
$kuntul2x[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2x[] = 'Applicationkey: indomaret';
$kuntul2x[] = 'Authorization: ';
$kuntul2x[] = 'User-Agent: okhttp/3.12.1';
$verif = curlx('https://account-api-v2.klikindomaret.com/api/Customer/LoginViaMobileApps?isMobile=true&device_token=2badfdf8-5d76-4c49-81cd-c7c3588eebc4&districtID=2483&TrafficSource=', '{"Email":"'.$nomor.'","Password":"'.$pw.'"}', $kuntul2x);
    $respi = json_decode($verif[1]);
                    $respid = $respi->ResponseID;
                $idne = $respi->ResponseObject->ID;
                $toked = $respi->ResponseObject->Token;
                $kuntul2 = array();
$kuntul2[] = 'Content-Type: application/json';
$kuntul2[] = 'Host: account-api-v2.klikindomaret.com';
$kuntul2[] = 'Applicationkey: indomaret';
$kuntul2[] = 'Authorization: Bearer '.$idne.'#'.$toked;
$kuntul2[] = 'User-Agent: okhttp/3.12.1';
                    $cekvcne = curlx('https://account-api-v2.klikindomaret.com/api/Customer/Account?access_token='.$respid, null, $kuntul2);
                    $respon = $cekvcne[1];
                    if (strpos($respon, '"IsActivated":true')) {
                $cok = json_decode($respon);
                $ID = $cok[0]->ID;
                $RegionId = $cok[0]->RegionId;
                $storeid = $cok[0]->StoreDefault;
                //

                $getscid = curlx('https://api.klikindomaret.com/api/ShoppingCart/MyCart?id=&customerId='.$ID.'&shoppingCartId=00000000-0000-0000-0000-000000000000&regionID='.$RegionId.'&mfp_id='.$respid.'&StoreCode='.$storeid.'&platform=ANDROID&NearestStoreLocation=&DeviceID='.urut(16).'&ShoppingcartPromoPackagesID=', null, $kuntul);
                $za = json_decode($getscid[1]);
                if (strpos($getscid[1], '"Message":"An error has occurred."')) {
                    echo @color('red', "ERROR KAK\n");
                } else {
                $scid = $za[0]->ID;

                $datane = '{"Code":"'.$vocer.'","ShoppingCartID":"'.$scid.'","CustomerID":"'.$ID.'","RegionID":"'.$RegionId.'","SalesOrderNo":"","Nominal":"","DeviceID":"'.urut(16).'","ShoppingCartPackageID":null}';
                save("$nomor;$respid;$datane\n", $vocer.".txt");
                echo @color('yellow', "Tersimpan di $vocer.txt\n");
            }

 
$no++;

} else {
    echo @color('red', "$respon\n");
            }
}
goto awalmula;
        break;
    
}
function curlx($url,$post,$headers,$follow=false,$method=null)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_COOKIEJAR, 'nganue.txt'); 
        curl_setopt($ch, CURLOPT_COOKIEFILE, 'nganue.txt');

        if ($follow == true) curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        if ($method !== null) curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        if ($headers !== null) curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        if ($post !== null) curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
        $result = curl_exec($ch);
        $header = substr($result, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        $body = substr($result, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        preg_match_all('/^Set-Cookie:s*([^;]*)/mi', $result, $matches);
        $cookies = array();
        foreach($matches[1] as $item) {
          parse_str($item, $cookie);
          $cookies = array_merge($cookies, $cookie);
        }
        return array (
        $header,
        $body,
        $cookies
        );
    }
    function post($url, $data=null)
    {
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, 1);
           $header[]='User-Agent: okhttp/3.12.1';
           $header[]='Connection: Keep-Alive';
           $header[]='Content-Type: application/json';
     curl_setopt($ch, CURLOPT_AUTOREFERER, true);
     curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
     curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
     curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
     curl_setopt($ch, CURLOPT_COOKIEJAR, "keliek.txt");
     curl_setopt($ch, CURLOPT_COOKIEFILE, "keliek.txt");
     $response = curl_exec($ch);
     $httpcode = curl_getinfo($ch);
    if (!$httpcode)
        return false;
    else {
        $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        $body   = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
    }
    $json = json_decode($body, true);
    print_r ($json);
    return $response;
}

function getRequestt($url)
    {
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
           $header[]='User-Agent: okhttp/3.12.1';
           $header[]='Connection: Keep-Alive';
     curl_setopt($ch, CURLOPT_AUTOREFERER, true);
     curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
     curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
     curl_setopt($ch, CURLOPT_COOKIEJAR, "keliek.txt");
     curl_setopt($ch, CURLOPT_COOKIEFILE, "keliek.txt");
     $response = curl_exec($ch);
     $httpcode = curl_getinfo($ch);
    if (!$httpcode)
        return false;
    else {
        $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        $body   = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
    }
    $json = json_decode($body, true);
    print_r ($json);
    return $response;
}
function postt($url, $data=null)
    {
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, 1);
           $header[]='User-Agent: okhttp/3.12.1';
           $header[]='Connection: Keep-Alive';
           $header[]='Content-Type: application/json';
     curl_setopt($ch, CURLOPT_AUTOREFERER, true);
     curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
     curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
     curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
     curl_setopt($ch, CURLOPT_COOKIEJAR, "keliek.txt");
     curl_setopt($ch, CURLOPT_COOKIEFILE, "keliek.txt");
     $response = curl_exec($ch);
     $httpcode = curl_getinfo($ch);
    if (!$httpcode)
        return false;
    else {
        $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        $body   = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
    }
    $json = json_decode($body, true);
    print_r ($json);
    return $response;
}
function curl($url,$post,$headers,$follow=false,$method=null)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        if ($follow == true) curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        if ($method !== null) curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        if ($headers !== null) curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        if ($post !== null) curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
        $result = curl_exec($ch);
        $header = substr($result, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        $body = substr($result, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
        preg_match_all('/^Set-Cookie:\s*([^;]*)/mi', $result, $matches);
        $cookies = array();
        foreach($matches[1] as $item) {
          parse_str($item, $cookie);
          $cookies = array_merge($cookies, $cookie);
        }
        return array (
        $header,
        $body,
        $cookies
        );
    }

function save($data, $file) 
    {
        $handle = fopen($file, 'a+');
        fwrite($handle, $data);
        fclose($handle);
    }

function urut($length) 
    {
        $str = "";
        
            $characters = array_merge(range('0','9'),range('a','z'));
        
        $max = count($characters) - 1;
        for ($i = 0; $i < $length; $i++) {
            $rand = mt_rand(0, $max);
            $str .= $characters[$rand];
        }
        return $str;
    }

function get_between($string, $start, $end) 
    {
        $string = " ".$string;
        $ini = strpos($string,$start);
        if ($ini == 0) return "";
        $ini += strlen($start);
        $len = strpos($string,$end,$ini) - $ini;
        return substr($string,$ini,$len);
    }

function remove_space($var) {
    $new = str_replace("\n", "", $var);
    $new = str_replace("\t", "", $new);
    $new = str_replace(" ", "", $new);
    return $new;
}
function urut2($length) 
    {
        $str = "";
        
            $characters = array_merge(range('0','9'),range('a','z'),range('A','Z'));
        
        $max = count($characters) - 1;
        for ($i = 0; $i < $length; $i++) {
            $rand = mt_rand(0, $max);
            $str .= $characters[$rand];
        }
        return $str;
    }
    function urut3($length) 
    {
        $str = "";
        
            $characters = array_merge(range('0','9'));
        
        $max = count($characters) - 1;
        for ($i = 0; $i < $length; $i++) {
            $rand = mt_rand(0, $max);
            $str .= $characters[$rand];
        }
        return $str;
    }

    function gen_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        // 32 bits for "time_low"
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

        // 16 bits for "time_mid"
        mt_rand( 0, 0xffff ),

        // 16 bits for "time_hi_and_version",
        // four most significant bits holds version number 4
        mt_rand( 0, 0x0fff ) | 0x4000,

        // 16 bits, 8 bits for "clk_seq_hi_res",
        // 8 bits for "clk_seq_low",
        // two most significant bits holds zero and one for variant DCE1.1
        mt_rand( 0, 0x3fff ) | 0x8000,

        // 48 bits for "node"
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}
function color($color = "default" , $text)
    {
        $arrayColor = array(
            'grey'      => '1;30',
            'red'       => '1;31',
            'green'     => '1;32',
            'yellow'    => '1;33',
            'blue'      => '1;34',
            'purple'    => '1;35',
            'nevy'      => '1;36',
            'white'     => '1;0',
        );  
        return "\033[".$arrayColor[$color]."m".$text."\033[0m";
    }
    function retrieveText($file, $init, $end, $sulfix = '')
{
    $i = 1;
    $output = '';

    $handle = fopen($file, 'r');
    while (false === feof($handle) && $i <= $end) {
        $data = fgets($handle);

        if ($i >= $init) {
            $output .= $data . $sulfix;
        }
        $i++;
    }
    fclose($handle);

    return $output;
}")); 
?>